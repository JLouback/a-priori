GROUP INFORMATION
----
Juliana Louback (jl4354) & Anthony Dubis (ajd2194)


FILES
-----
- Algorithmn.java - Contains the a-priori algorithm and rule generator- Interaction.java - Handles user interaction- Itemset.java - object for storing an item set and its respective support
- Preprocessor.java - sorts dataset transactions into lexicographic order- Rule.java - object for storing a rule and its respective support and confidence- Utils.java - contains supportive method for BitSet manipulation

- example-run.txt - result of java -jar a-priori.jar integrated-dataset.csv 0.01 0.3
- integrated-dataset.csv - preprocessed dataset used


DATA
----
The dataset being used is found here:
https://data.cityofnewyork.us/Social-Services/last_crime_nyc/maj4-ux6k,
a record of all 311 Service Requests from 2010 to present, updated daily. Using the
NYCOpenData dashboard, we filtered the data to contain only Complaint Type,
Location Type, Incident Zip,and Borough. The script Preprocessor.java reads in the
dataset and outputs the same data but sorts the items in each row lexicographically.

We believe this data could provide interesting insights to the main causes of
complaints in New York boroughs. This information could be useful to people planning
to live in a certain region and also could be used by the city administration to
identify specific departments that may require more attention.

Below are some of our more interesting rule findings:

[Blocked Driveway, Street/Sidewalk] => [QUEENS] (Conf: 42.02%, Supp: 1.11%)
[Blocked Driveway, Street/Sidewalk] => [BROOKLYN] (Conf: 38.14%, Supp: 1.00%)
- Two out of 5 boroughs account for roughly 80% of blocked driveway complaints.

[PLUMBING, RESIDENTIAL BUILDING] => [BROOKLYN] (Conf: 38.63%, Supp: 1.79%)
[PAINT - PLASTER, RESIDENTIAL BUILDING] => [BROOKLYN] (Conf: 36.07%, Supp: 1.29%)
[HEATING, RESIDENTIAL BUILDING] => [BROOKLYN] (Conf: 33.21%, Supp: 8.61%)
[ELECTRIC, RESIDENTIAL BUILDING] => [BROOKLYN] (Conf: 42.91%, Supp: 1.03%)
- Brooklyn has serious issues with residential buildings. Theoretically, one would 
  expect about 20% of the complaints per borough. 
  
 [PLUMBING, RESIDENTIAL BUILDING] => [BRONX] (Conf: 30.18%, Supp: 1.39%)
 [PAINT - PLASTER, RESIDENTIAL BUILDING] => [BRONX] (Conf: 34.36%, Supp: 1.23%)
 [GENERAL CONSTRUCTION, RESIDENTIAL BUILDING] => [BRONX] (Conf: 31.47%, Supp: 1.92%)
 - Bronx apparently joins Brooklyn in having serious issues with residencial buildings.
 
[Street Light Condition] => [QUEENS] (Conf: 32.32%, Supp: 1.62%)
[Street/Sidewalk] => [QUEENS] (Conf: 34.31%, Supp: 1.86%)
[Street] => [QUEENS] (Conf: 50.01%, Supp: 8.92%)
- The streets in Queens could use extra attention?

[MANHATTAN] => [HEATING] (Conf: 33.07%, Supp: 5.98%)
[MANHATTAN, RESIDENTIAL BUILDING] => [HEATING] (Conf: 64.41%, Supp: 5.98%)
- A lot of Manhattan's complaints are about heating, I couldn't agree more.

Moral of the story, housing in Brooklyn and the Bronx is sketch AF, Queens has the
lowest residence-related complaints but the streets be mad ugly. Manhattaners are
lil' bitches about the cold.

HOW TO RUN
----------
java -jar a-priori.jar <dataset file> <min_sup> <min_conf>

INTERNAL DESIGN
---------------

Interaction.java
----------------
Receives the dataset file path, support and confidence thresholds from the
command line and with it initializes an Algorithm object and calls execute().


Algorithm.execute()
-------------------
1 Run firstItemset() to obtain a set of single term Itemsets (k=1) which make the
  minimum support threshold:
  When initializing an Algorithm object with a given dataset, we initialize a
  HashMap with a term as key and a bit vector as value for each term we
  encounter in the dataset. The bit vector indicates which transactions contain
  a given term. For example, assume we have four transactions. An item A has a bit
  vector of 1101 (indicating it is present in transactions 1, 2, and 4) and item
  B has a bit vector of 1011 (present in 1, 3 and 4). The AND of bit vector A and
  bit vector B gives us 1001. This implies that transactions 1 and 4 contain both
  A and B. Given that these bitwise operations are extremely fast, this improved
  the running time of our algorithm dramatically. And since the calculations for
  support and confidence essentially involves getting the total number of times
  certain itemsets appear in different transactions, all we have to do is count
  the number of 1s in the bit vector once we're done with our operations.
  In sum, firstItemset() counts the 1���s in each term���s bit vector and generates an  
  Itemset object with the calculated support and the term; only Itemsets with
  sufficient support are returned in a set.

2 Run aprioriGen() incrementing k until the set of Itemsets with k items is empty,
  storing the set of Itemsets at each iteration in a list L:
  2.1 join() on round k of aprioriGen(), join receives the set of Itemset objects
      obtained on round k-1. This method attemps to join Itemset p from the set
      with all the Itemsets ahead of p (in lexicographical order of items in the 	
      Itemset). First two Itemsets, p and q, are verified in validJoin(): all k-2
      first items must be the same and the k-1th item of p is before the k-1th 	
      item of q in lexicographic order. If valid, the support for the candidate 	  
      Itemset resulting from joining p and q - the items in p and the last
      item of q - is calculated (see 2.1 for details). If this support score is
      greater than or equal to the threshold, it is added to the return set.
  2.2 prune() receives two sets of Itemsets, that of round k-1 and round k.
      It verifies if all the possible subsets of Itemsets obtained in round
      k are present in the set of Itemsets of round k-1, removing those which
      don���t pass the verification from the return set.
  2.3 Return the set of Itemsets that ���survived��� step 2.2.

3 Run writeFrequentItemsets() to write to output.txt the Itemsets that have
  sufficient support, contained in list L returned by step 2.

4 Run getRules() to generate a list of Rule objects for the Itemsets in L, 
  filtering Rules that don���t meet confidence requirements:
  For each Itemset x in the list L of candidate item sets, for each possible n
  choose 1 combination, create a Rule with 1 item of x on the RHS and all the other
  items of x on the LHS:
  4.1 Calculate the confidence of the Rule: (the cardinality of an AND of all bit
      vectors for items in the LHS and RHS) divided by (the cardinality of an AND
      of all bit vectors for items in the LHS). If the confidence is sufficient,
      save the Rule (with its respective support and confidence) to the return list.

5 Run writeRules() to write to output.txt the association rules found in the data that
  adhere to the specified confidence and support requirements, returned on step 4.
	

SAMPLE RUN
----------
java -jar a-priori.jar integrated-dataset.csv 0.01 0.3